Calibration
===========

The experiment controllers load a calibration file for each speaker in the
system.  Currently only two speakers (primary and secondary) are connected to
the hardware.  The calibration data typically can be accessed as
`Controller.cal_primary` and `Controller.cal_secondary`.  Both attributes are
instances of :class:`cns.calibration.Calibration`.  If you launched the
experiment using the `--att` flag, the attributes will be instances of
:class:`cns.calibration.Attenuation`.  If you have successfully equalized the
speakers or are using equalized noise, then you would want to use
:class:`cns.calibration.EqualizedCalibration`.

Generating the calibration
..........................
Right now the only supported format is the calibration files generated by
Sharad's FIRCal program (Matlab-based).  Once you have generated these files,
you can load them into Neurobehavior using :func:`cns.calibration.load_mat_cal`
or :func:`cns.calibration.Calibration.loadmat` (`loadmat` is just a classmethod
that calls `load_mat_cal`).

Gain versus attenuation
.......................
Although gain is technically the inverse of attenuation, we break these out into
separate values since many auditory setups typically have two hardware devices
in the pathway (a programmable attenuator along with an amplifier whose gain is
manually configurable via knobs).  For most of the functions below, gain refers
to the manual gain setting on the amplifier (if you don't have an amplifier, it is
safe to leave the gain at the default value of 0).  Attenuation, in turn, refers
to the value that the programmable attenuator needs to be set at to achieve the
desired sound level.

Calibration API
...............

.. autofunction:: cns.calibration.load_mat_cal

.. autoclass:: cns.calibration.Calibration
    :members:

.. autoclass:: cns.calibration.Attenuation
    :members:

.. autoclass:: cns.calibration.EqualizedCalibration
    :members:

