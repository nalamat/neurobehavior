from cns.data.constants import ANIMAL_IDS, ANIMAL_STATUS
from cns.data.trait_types import CTuple, CDate
from enthought.traits.api import HasTraits, Date, Enum, Instance, CList, \
    Property, Int, CStr, CInt, CFloat, List, Any, Bool
import datetime

#from cns.experiment.data import ExperimentData

#class Experiment(HasTraits):
#    pass
#
#class BehaviorExperiment(HasTraits):
#    
#    paradigm        = Instance(Paradigm, store='node')
#    date            = Date(store='attribute')
#    experimenter    = Enum(*EXPERIMENTERS, store='attribute')
#    #data            = Instance(ExperimentData, store='node')

class Animal(HasTraits):

    # id is an internal ID that is always guaranteed to be unique since we have
    # absolute control over this ID.  nyu_id is the ID generated by the animal
    # care facility.  Although this is supposedly unique, it is generally a bad
    # idea to use an external ID as the primary key for our database as they may
    # change the ID in the future (i.e. change it to an alphanumeric string if
    # they switch databases or reuse IDs).

    #id = CInt(-1, store='key')
    nyu_id = CInt(store='attribute', label='NYU ID')
    identifier = Enum(*ANIMAL_IDS, store='attribute')
    sex = Enum('U', 'M', 'F', store='attribute')
    birth = Date(store='attribute')
    parents = CStr(store='attribute')
    age = Property(Int, depends_on='birth')
    weight_log = CList(CTuple(CDate, CFloat), [],
                            store='table',
                            col_names=['date', 'weight'],
                            col_types=['datetime64[M]', 'float32'])
    status_log = CList(CTuple(CDate, Enum(*ANIMAL_STATUS)), [],
                            store='table',
                            col_names=['date', 'status'],
                            col_types=['datetime64[M]', 'S32'])
    processed = Bool(False)

    store_node = Any # pointer to the storage node
    #experiments     = CList(Experiment, [], store='node')          
    
    def _get_age(self):
        if self.birth is None:
            return -1
        else:
            td = datetime.date.today() - self.birth
            return td.days

    def __repr__(self):
        # Is this needed?
        try: date = self.birth.strftime('%Y_%m_%d')
        except: date = 'no_birth'
        template = 'Litter_%(parents)s_%(identifier)s_%(sex)s_%(date)s'
        return template % dict(date=date, parents=self.parents,
                identifier=self.identifier, sex=self.sex)

    def __str__(self):
        #return '{identifier} {sex} (NYU ID {nyu_id}'.format(self.__dict__).capitalize()
        return '%s %s NYU%d' % (self.identifier, self.sex, self.nyu_id)
    
    #def __cmp__(self, other):
    #    if self is other:
    #        return True
    #    else:
    #        return (self.sex, self.identifier) > (other.sex, other.identifier)

class Cohort(HasTraits):

    description = CStr(store='attribute')
    animals = List(Instance(Animal), store='child')
    size = Property(Int, depends_on=['animals[]'])

    def _get_size(self):
        return len(self.animals)

    def __str__(self):
        return '%s (n=%d)' % (self.description, self.size)
