import os
import settings

from run_aversive_paradigm import AversiveExperiment
from cns.experiment.controller import AversiveController
import tables
from cns import data
from cns.data.type import Cohort
from cns.data import io_gui
from cns.data.view.edit_cohort import CohortView, CohortEditView
from cns.equipment.pump import Pump
from cns.experiment.data import AversiveData, AnalyzedAversiveData, \
    AnalyzedAversiveDataView, AnalyzedView, ExperimentData
from cns.experiment.paradigm import AversiveParadigm, ParadigmView, \
    AversiveParadigmView, Paradigm
from cns.experiment.paradigm.aversive_paradigm_view import readonly_aversive_paradigm_view
from enthought.pyface.api import FileDialog, OK, YES, error, confirm
from enthought.traits.api import File, DelegatesTo, HasTraits, Instance, \
    Property, Str, on_trait_change, Any, Button, Bool, Event
from enthought.traits.ui.api import Handler, View, Item, HGroup, VGroup, spring, \
    InstanceEditor
from enthought.traits.ui.menu import Action, Menu, MenuBar
import cPickle as pickle
import cns

class MainWindowHandler(Handler):

    par_wildcard    = cns.PAR_WILDCARD
    par_path        = cns.PAR_PATH
    par_file        = File

    cohort_file     = File

    equipment       = Any

    pump_connected  = Bool(False)

    def init(self, info):
        try:
            file, cohort = io_gui.cohort_load_prompt()
            info.object.cohort = cohort
            self.cohort_file = file
        except BaseException, e:
            error(info.ui.control, str(e))

        
        try:
            confirm(None, 'open?')
            from cns import equipment 
            self.equipment = equipment
            if self.equipment.pump_controller is not None:
                self.pump_connected = True
        except Exception, e:
            print e
            error(info.ui.control, 'unable to load equipment')

    def create_cohort(self, info):
        file = io_gui.cohort_filename_prompt()
        if file is not None:
            info.object.cohort = Cohort()
            self.cohort_file = file
            self.edit_cohort(info)

    def edit_cohort(self, info):
        info.object.cohort_view = CohortEditView(cohort=info.object.cohort)

    def save_cohort(self, info):
        info.object.cohort_view = CohortView(cohort=info.object.cohort)
        if self.cohort_file is None:
            file = io_gui.cohort_filename_prompt()
        else:
            file = self.cohort_file
        if file is not None:
            data.io.save_cohort(info.object.cohort, file)
            self.cohort_file = file

    def create_paradigm(self, info):
        dlg = AversiveParadigmView()
        if dlg.edit_traits(view='full_view').result:
            info.object.paradigm = dlg.paradigm

    def edit_paradigm(self, info):
        if info.object.paradigm is not None:
            dlg = AversiveParadigmView(paradigm=info.object.paradigm)
            if dlg.edit_traits(view='full_view').result:
                info.object.paradigm = dlg.paradigm

    def object_do_experiment_changed(self, info):
        self.run_experiment(info)

    def object_save_cohort_changed(self, info):
        info.object.cohort_view = CohortEditView(cohort=info.object.cohort)
        info.object.edit_mode = True
        
    def run_experiment(self, info):
        try:
            item = info.object.cohort_view.selected
            if item.store_node._v_isopen:
                store_node = item.store_node
            else:
                file = tables.openFile(item.store_file, 'a')
                store_node = file.getNode(item.store_path)
        
            info.ui.control.setVisible(False)
            model = AversiveExperiment(store_node=store_node,
                                       paradigm=info.object.paradigm)
            handler = AversiveController()
            if model.edit_traits(handler=handler).result:
                item.processed = True
        except AttributeError: pass
        finally: info.ui.control.setVisible(True)
        
    #def pump_infuse(self, info):
    #    self.equipment.pump_controller.do_fill_tube()

    #def pump_withdraw(self, info):
    #    self.equipment.pump_controller.do_empty_tube()

    def close(self, info, is_ok):
        mesg = 'Are you sure you wish to exit?'
        return confirm(info.ui.control, mesg) == YES

        
class MainWindow(HasTraits):

    #paradigm_view   = Instance(AversiveParadigmView)
    paradigm        = Instance(AversiveParadigm)

    cohort_view     = Instance(CohortView, ())
    cohort          = DelegatesTo('cohort_view')
    
    do_experiment   = Event
    
    #def _paradigm_view_default(self):
    #    return AversiveParadigmView(paradigm=AversiveParadigm())
    
    #@on_trait_change('paradigm')
    #def update_paradigm_view(self, new):
    #    return AversiveParadigmView(paradigm=new)
    
    #def _cohort_view_default(self):
    #    return CohortView(cohort=self.cohort)
    
    @on_trait_change('cohort')
    def update_cohort_view(self, new):
        self.cohort_view = CohortView(cohort=new)

    @on_trait_change('cohort_view.dclicked')
    def fire_experiment(self):
        self.do_experiment = True
        
    def trait_view(self, parent=None):
        actions = [Action(name='Load Cohort', action='load_cohort'), 
                   Action(name='Edit Cohort', action='edit_cohort',
                          enabled_when='cohort is not None'),
                   Action(name='Create Cohort', action='create_cohort'), ]

        animal_actions = actions

        enabled = 'handler.equipment.pump_controller is not None'
        actions = [Action(name='Calibrate', action='calibrate',
                          enabled_when='False'),
                   Action(name='Load Calibration', action='load_cal',
                          enabled_when='False'),
                   '-',
                   Action(name='Infuse pump', action='pump_infuse',
                          enabled_when='handler.pump_connected'),
                   Action(name='Withdraw pump', action='pump_withdraw',
                          enabled_when='handler.pump_connected'),]

        equipment_actions = actions

        actions = [Action(name='Select paradigm', action='load_paradigm'),
                   Action(name='Edit paradigm', action='edit_paradigm',
                          enabled_when='paradigm is not None'),
                   Action(name='Save paradigm', action='save_paradigm'),
                   Action(name='Create new paradigm', action='create_paradigm'),
                   '_',
                   Action(name='Run experiment', action='run_experiment'),]

        experiment_actions = actions

        animal_menu = Menu(*animal_actions, name='&Animals')
        equipment_menu = Menu(*equipment_actions, name='&Equipment')
        experiment_menu = Menu(*experiment_actions, name='&Experiment')
        #menu = MenuBar(animal_menu, equipment_menu, experiment_menu)
        menu = MenuBar(animal_menu, experiment_menu)

        return View('_',
                    Item('edit_cohort', visible_when='not edit_mode'),
                    HGroup(Item('cohort_view', style='custom'),
                           Item('paradigm', style='custom',
                                editor=InstanceEditor(view='static_view')),
                           show_labels=False
                           ),
                    resizable=True,
                    menubar=menu,
                    handler=MainWindowHandler(),
                    height=0.7,
                    width=0.7,
                    )

if __name__ == '__main__':
    MainWindow().configure_traits()
